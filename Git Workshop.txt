-------------------git與github------------------------
git    : 版本控制系統
github : 提供線上管理Git資料的平台，可以將資料用 git 的方式儲存在 github



-------------------Qsync的缺點-----------------------
A.Qsync編輯檔案的人，編輯的次數和內容以及目的無法得知
B.Qsync如果沒有手動保存，就沒辦法再回朔到某一個狀態的資訊(回到2018/5/14的資料夾長什麼樣子)
C.Qsync刪掉檔案的話就消失了



-------------------git的功能介紹-----------------------
1.Repository   : 儲藏庫(與Qsync資料夾相似)
2.Commit       : 每一次資料修改都要做Commit確認，Commit後會產生新的版本
3.Clone        : 複製資料到自己電腦
4.Branch       : 產生另外一條支線
5.Pull request : 把支線或fork同步或整合所送出的request
6.Fork         : 拿別人的儲藏庫回來


-------------------新增_commit---------------------
檔案命名:   不知道作者以及建立時間的檔案.txt
檔案內容:   說明 : Qsync如果沒有看到螢幕跳出來的更新的話，很難知道是誰建立這個檔案的以及目的，但是Git可以透過commit掌握這些資訊
Commit內容: 第二個版本建立



-------------------修改_commit---------------------
檔案內容:   說明 : git可以知道你在哪一個版本(Commit)加了哪些內容
Commit內容: 第三個版本建立



-------------------刪除_commit---------------------
檔案命名:   刪掉就消失的檔案.txt
檔案內容:   說明 : Qsync如果沒有備份，刪掉就再也找不回來了，但是Git可以透過版本回溯的功能找回檔案
Commit內容: 第四個版本建立

刪除時的Commit內容: 第五個版本建立 (小Allen刪的)


-------------------分支_Branch-----------------------
檔案命名:    投影片_基礎架構.txt
檔案內容:    Division Training要做報告，所以4/1先建一個包含大綱部分的投影片做為主要的投影片 
Kim、Miyai和小Allen分別以此作為基礎去製作自己負責部分的投影片內容，最後在一起合成同一份
Commit內容:  Division Training要到了，所以我們做了一份基礎的報告，需要變更QQsync資料夾的所有資訊


Branch命名:   AllenXL
檔案命名:     有趣影片網址.txt
檔案內容:     小Allen先放有趣影片的網址到自己複製的資料夾內
Commit內容:   小Allen加了補充資料

---------------------------------------------------
